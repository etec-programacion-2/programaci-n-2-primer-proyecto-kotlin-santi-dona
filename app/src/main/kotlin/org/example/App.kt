/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

class App {
    val greeting: String
        get() {
            return "Hello Kotlin!"
        }
}

fun tiposdeDatos(){
    val nombre: String = "Santino"
    val edad: Int = 17
    val altura: Double = 1.74
    val soyAlumno: Boolean = true

    println("Nombre: $nombre")
    println("Edad: $edad")
    println("Altura: $altura")
    println("Es alumno: $soyAlumno")

    val base: Double = 5.0
    val alturaRectangulo: Double = 3.0
    val area: Double = base * alturaRectangulo
    println("El área del rectángulo es: $area")
}
fun esParOImpar(numero: Int) {
    when (numero % 2) {
        0 -> println("El número $numero es par")
        else -> println("El número $numero es impar")
    }
}

fun determinarTipoDeNumero(numero: Int): String {
    return when {
        numero > 0 -> "El número es positivo"
        numero < 0 -> "El número es negativo"
        else -> "El número es cero"
    }
}
fun mostrarNumerosConLoops() {
    // Usando for
    println("Usando for:")
    for (i in 1..10) {
        println(i)
    }
    
    // Usando while
    println("\nUsando while:")
    var j = 1
    while (j <= 10) {
        println(j)
        j++
    }
    
    // Usando do-while
    println("\nUsando do-while:")
    var k = 1
    do {
        println(k)
        k++
    } while (k <= 10)
}

fun mostrarNumerosParesConLoops() {
    // Usando for
    println("Usando for:")
    for (i in 2..20 step 2) {
        println(i)
    }
    
    // Usando while
    println("\nUsando while:")
    var j = 2
    while (j <= 20) {
        println(j)
        j += 2
    }
    
    // Usando do-while
    println("\nUsando do-while:")
    var k = 2
    do {
        println(k)
        k += 2
    } while (k <= 20)
}
fun main() {
    println("Hello Kotlin")
    println("Hola soy Santino y hoy es Martes 22 de Abril")
    tiposdeDatos()
    esParOImpar(7)
    esParOImpar(12)
    esParOImpar(50)
    esParOImpar(-3)
    esParOImpar(0)
    println("${determinarTipoDeNumero(5)}")  
    println(determinarTipoDeNumero(-3))  
    println(determinarTipoDeNumero(0))   
    mostrarNumerosConLoops()
    mostrarNumerosParesConLoops()
}